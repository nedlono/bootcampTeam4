pragma solidity ^0.4.0;
contract Network {
        
		// Declares a new complex type for a new vaccine
		struct vaccine {
			address patientID; //Primary key to identify patient
			uint batch; //Numerical 
			uint date; //Current block timestamp (block.timestamp) 
			bytes virus;  
			uint expiry; //Date - but will include some form of text character ie (09/11) 
			uint[] symptoms; 
		}
		
	    //Map all patient to all treatment 
        mapping(address => vaccine) public patientVaccines;
        
        //Map all patients to their doctors
        mapping(address => address[]) public approvedDoctors;
    
    // Method to add a new treatment for a patient
    function setTreatment(vaccine _newTreatment) public {
        /* If the user is a doctor (how?) and is approved, allow the vaccine to be added to the patients map*/
        if (doc)
        if(doc is rejected)
            /* doctor is approved to patient && patient approves newTreatment */ ) {
            
        }
    }
      
	 //Use case #1: Store vaccine
    function vaccine(uint patientID, uint batch, uint date, bytes virus, uint expiry, uint[] symptoms) {
        
        
    }
    
    
    
    /*Use case #2: Return a patients vaccine history */
    function returnVaccineHistory(){
        for (uint i = 0; i < vaccine.length; i++){
			if (vaccine[i].r
    }
    
    
    
}
